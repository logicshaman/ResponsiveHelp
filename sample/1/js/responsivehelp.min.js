// Responsive Help
// Author: Eulr A. Masauding
// Date: August 7, 2019
// Version 1

// The Responsive Width
// $("body").append("<div id='Rwidthlistener' style='position:fixed !important;margin:0 !important;padding:0 !important;width:100% !important;visibility:hidden;box-sizing:unset;'></div");
function dynamicWW(){return jQuery(window).width()};

// RESPONSIVE PLUGIN
function responsiveHelp($MNW,$MXW,STU){
	// $MNW is the Default Site Min Width
	// $MXW is thge Default Site Max Width
	// $TU is the Scale To Use

	// Secure $ as jQuery
	var $ = jQuery;

	// producing accesible variables inside a function
	function PGF(){
		$DWW = dynamicWW(); // Dynamic Window Width
		$WWS = $DWW - $MNW, // Window Width Scope
		$SWR = $MXW - $MNW; // Site Width Range
		$MAX = $MXW < $DWW; // position checker
		$MIN = $MNW > $DWW; // position checker
		$TU	 = STU||"rem";  // Define default scale is not defined
	}PGF();
	$(window).resize(function(){PGF()});


	//Define Function for 1 up to 4 values
	function $ingleVal(a,b){
		var r = b - a,
				i	= r / $SWR;
		if($MAX){
			return b
		}else if($MIN){
			return a
		}else{
			return a+(i*$WWS)
		}
	}
	function $TwoVals(a,b,c,d,itb,irl){
		if($MAX){
			return [c,d]
		}else if($MIN){
			return [a,b]
		}else{
			return [a+(itb*$WWS), b+(irl*$WWS)]
		}
	}
	function T$RL$B(a,b,c,d,e,f,it,irl,ib){
		if($MAX){
			return [d,e,f]
		}else if($MIN){
			return [a,b,c]
		}else{
			return [a+(it*$WWS), b+(irl*$WWS), c+(ib*$WWS)]
		}
	}
	function T$R$B$L(a,b,c,d,e,f,g,h,it,ir,ib,il){
		if($MAX){
			return [e,f,g,h]
		}else if($MIN){
			return [a,b,c,d]
		}else{
			return [a+(it*$WWS), b+(ir*$WWS), c+(ib*$WWS), d+(il*$WWS)]
		}
	}


	// Responsive Text
	$.fn.RfontSize = function(a,b,s){
		this.css("fontSize", $ingleVal(a,b)+(s||$TU));
		return this;
	};
	//  Responsive Line Height
	$.fn.RlineHeight = function(a,b,s){
		this.css("lineHeight",$ingleVal(a,b)+(s||$TU));
		return this;
	};
	//  Responsive Letter-spacing
	$.fn.RletterSpacing = function(a,b,s){
		this.css("letterSpacing",$ingleVal(a,b)+(s||$TU));
		return this;
	};

	// Responsive Width
	$.fn.Rwidth = function(a,b,s){
		this.css("width",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// Responsive Height-According-To-Width
	$.fn.RheightByWidth = function(a,b,s){
		this.css("height",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// Responsive Width with Break Points
	function breakPointsVal(nw,xw,nbw,xbw,c2,d2){
		if(typeof(c2)=="number"){nbw=c2;}
		if(typeof(d2)=="number"){xbw=d2;}
		var range = xw - nw,
			scope = xbw - nbw,
			i = range / scope,
			wScope = $DWW - nbw;
		if(nbw>=$DWW){
			return nw
		}else if(xbw<=$DWW){
			return xw
		}else{
			return nw + (i * wScope)
		}
	}
	$.fn.RwidthBreakPoints = function(arg){
		var argN=arguments[0].length;
		for (var i = 0; i < argN; i++){
			var a  = arg[i][0],b=arg[i][1],c=arg[i][2],d=arg[i][3],e=arg[i][4];
			if(i==0){
				c=0; var c2=arg[0][2],d2="";
			}else if(i==(argN-1)){
				d=99999; var d2=arg[(argN-1)][3],c2="";
			}else{
				var c2="",d2="";
			}
			if($DWW>=c&&$DWW<=d){
				var val= breakPointsVal(a,b,c,d,c2,d2);
				this.css("width",val+(e||$TU));
			}
		}
		return this;
	}
	//responsive max-width
	$.fn.RmaxWidth = function(a,b,s){
		this.css("maxWidth",$ingleVal(a,b)+(s||$TU));
		return this;
	}

	// Responsive Padding
	$.fn.Rpadding = function(arg){
		if(typeof(arguments[0][0])=="number"){
			var a=arg[0],b=arg[1],c=arg[2],d=arg[3],
					e=arg[4],f=arg[5],g=arg[6],h=arg[7];
		}else{
			var a=arg[0][0],b=arg[0][1],c=arg[0][2],d=arg[0][3],
					e=arg[0][4],f=arg[0][5],g=arg[0][6],h=arg[0][7],
					s=arg[1][0],t=arg[1][1],u=arg[1][2],v=arg[1][3];
		}
		if(arguments[0].length==2||arguments[0][0].length==2){
			this.css("padding",$ingleVal(a,b)+(c||$TU));
		}else if(arguments[0].length==4||arguments[0][0].length==4){
			var tbp = c - a,
					rlp = d - b,
					itb = tbp / $MXW,
					irl = rlp / $MXW,
					p		= $TwoVals(a,b,c,d,itb,irl);
			this.css({
				paddingTop: 	p[0]+(s||$TU),
				paddingBottom:p[0]+(s||$TU),
				paddingRight: p[1]+(t||s||$TU),
				paddingLeft: 	p[1]+(t||s||$TU)
			});
		}else if(arguments[0].length==6||arguments[0][0].length==6){
			var tp	= d - a,
					rlp = e - b,
					bp	= f - c,
					it  = tp / $MXW,
					irl = rlp / $MXW,
					ib  = bp / $MXW,
					p		= T$RL$B(a,b,c,d,e,f,it,irl,ib);
			this.css({
				paddingTop: 	p[0]+(s||$TU),
				paddingRight: p[1]+(t||s||$TU),
				paddingLeft: 	p[1]+(t||s||$TU),
				paddingBottom:p[2]+(u||s||$TU)
			});
		}else if(arguments[0].length==8||arguments[0][0].length==8){
			var tp = e  - a,
					rp = f  - b,
					bp = g  - c,
					lp = h  - d,
					it = tp / $MXW,
					ir = rp / $MXW,
					ib = bp / $MXW,
					il = lp / $MXW,
					p		= T$R$B$L(a,b,c,d,e,f,g,h,it,ir,ib,il);
			this.css({
				paddingTop: 	p[0]+(s||$TU),
				paddingRight: p[1]+(t||s||$TU),
				paddingBottom:p[2]+(v||s||$TU),
				paddingLeft: 	p[3]+(u||t||s||$TU)
			});
		}
		return this;
	}

	// Responsive Margin
	$.fn.Rmargin = function(arg){
		if(typeof(arguments[0][0])=="number"){
			var a=arg[0],b=arg[1],c=arg[2],d=arg[3],
					e=arg[4],f=arg[5],g=arg[6],h=arg[7];
		}else{
			var a=arg[0][0],b=arg[0][1],c=arg[0][2],d=arg[0][3],
					e=arg[0][4],f=arg[0][5],g=arg[0][6],h=arg[0][7],
					s=arg[1][0],t=arg[1][1],u=arg[1][2],v=arg[1][3];
		}
		if(arguments[0].length==2||arguments[0][0].length==2){
			this.css("margin",$ingleVal(a,b)+(s||$TU));
		}
		if(arguments[0].length==4||arguments[0][0].length==4){
			var	tbm = c - a,
					rlm = d - b,
					itb = tbm / $MXW,
					irl = rlm / $MXW,
					m		= $TwoVals(a,b,c,d,itb,irl),
					tb	= m[0]+(s||$TU),
					rl	= m[1]+(t||s||$TU);
			if(a==="auto"||c==="auto"){tb="auto";s=t=""}
			if(b==="auto"||d==="auto"){rl="auto";s=t=""}
			this.css({
				marginTop:	 tb,
				marginBottom:tb,
				marginRight: rl,
				marginLeft:	 rl
			});
		}
		if(arguments[0].length==6||arguments[0][0].length==6){
			var	tm = d - a,
					rlm= e - b,
					bm = f - c,
					it = tm / $MXW,
					irl= rlm / $MXW,
					ib = bm / $MXW,
					m	 = T$RL$B(a,b,c,d,e,f,it,irl,ib),
					top= m[0]+(s||$TU),
					rl = m[1]+(t||s||$TU),
					btm= m[2]+(u||s||$TU);
			if(a==="auto"||d==="auto"){top  ="auto";s=t=u=""}
			if(b==="auto"||e==="auto"){rl ="auto";s=t=u=""}
			if(c==="auto"||f==="auto"){btm="auto";s=t=u=""}
			// console.log("6th");
			this.css({
				marginTop:	 top,
				marginRight: rl,
				marginLeft:	 rl,
				marginBottom:btm
			});
		}
		if(arguments[0].length==8||arguments[0][0].length==8){
			var	tm = e - a,
					rm = f - b,
					bm = g - c,
					lm = h - d,
					it = tm / $MXW,
					ir = rm / $MXW,
					ib = bm / $MXW,
					il = lm / $MXW,
					m	 = T$R$B$L(a,b,c,d,e,f,g,h,it,ir,ib,il),
					top	 = m[0]+(s||$TU),
					r  = m[1]+(t||s||$TU),
					btm= m[2]+(u||s||$TU),
					l  = m[3]+(v||t||s||$TU);
			if(e==="auto"||a==="auto"){top 	="auto";s=t=u=v=""}
			if(f==="auto"||b==="auto"){r 	="auto";s=t=u=v=""}
			if(g==="auto"||c==="auto"){btm="auto";s=t=u=v=""}
			if(h==="auto"||d==="auto"){l 	="auto";s=t=u=v=""}
			this.css({
				marginTop:	 top,
				marginRight: r,
				marginBottom:btm,
				marginLeft:	 l
			});
		}
		return this;
	}

	// Responsive Radius
	$.fn.RborderRadius = function(arg){
		if(typeof(arguments[0][0])=="number"){
			var a=arg[0],b=arg[1],c=arg[2],d=arg[3],
					e=arg[4],f=arg[5],g=arg[6],h=arg[7];
		}else{
			var a=arg[0][0],b=arg[0][1],c=arg[0][2],d=arg[0][3],
					e=arg[0][4],f=arg[0][5],g=arg[0][6],h=arg[0][7],
					s=arg[1][0],t=arg[1][1],u=arg[1][2],v=arg[1][3];
		}

		if(arguments[0].length==2||arguments[0].length==2){
			this.css("borderRadius",$ingleVal(a,b)+(s||$TU));
		}
		if(arguments[0].length==4||arguments[0].length==4){
			var tbr = c - a,
					rlr = d - b,
					itb = tbr / $MXW,
					irl = rlr / $MXW,
					r		= $TwoVals(a,b,c,d,itb,irl);
			this.css({
				borderTopLeftRadius: 		r[0]+(s||$TU),
				borderTopRightRadius: 	r[0]+(s||$TU),
				borderBottomLeftRadius: r[1]+(t||s||$TU),
				borderBottomRightRadius:r[1]+(t||s||$TU)
			});
		}
		if(arguments[0].length==6||arguments[0].length==6){
			var tr	= d - a,
					rlr = e - b,
					br	= f - c,
					it  = tr / $MXW,
					irl = rlr / $MXW,
					ib  = br / $MXW,
					r		= T$RL$B(a,b,c,d,e,f,it,irl,ib);
			this.css({
				borderTopLeftRadius: 		r[0]+(s||$TU),
				borderTopRightRadius: 	r[1]+(t||s||$TU),
				borderBottomLeftRadius: r[1]+(t||s||$TU),
				borderBottomRightRadius:r[2]+(u||s||$TU)
			});
		}
		if(arguments[0].length==8||arguments[0].length==8){
			var tr	= e  - a,
					rr	= f  - b,
					br	= g  - c,
					lr	= h  - d,
					it = tr / $MXW,
					ir = rr / $MXW,
					ib = br / $MXW,
					il = lr / $MXW,
					r		= T$R$B$L(a,b,c,d,e,f,g,h,it,ir,ib,il);
			this.css({
				borderTopLeftRadius: 		r[0]+(s||$TU),
				borderTopRightRadius: 	r[1]+(t||s||$TU),
				borderBottomRightRadius:r[2]+(u||s||$TU),
				borderBottomLeftRadius: r[3]+(v||t||s||$TU)
			});
		}

		return this;
	}

	// Individualized values counter section

	// responsive top
	$.fn.Rtop = function(a,b,s){
		this.css("top",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive right
	$.fn.Rright = function(a,b,s){
		this.css("right",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive bottom
	$.fn.Rbottom = function(a,b,s){
		this.css("bottom",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive left
	$.fn.Rleft = function(a,b,s){
		this.css("left",$ingleVal(a,b)+(s||$TU));
		return this;
	}

	// responsive padding-top
	$.fn.RpaddingTop = function(a,b,s){
		this.css("paddingTop",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive padding-right
	$.fn.RpaddingRight = function(a,b,s){
		this.css("paddingRight",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive padding-bottom
	$.fn.RpaddingBottom = function(a,b,s){
		this.css("paddingBottom",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive padding-left
	$.fn.RpaddingLeft = function(a,b,s){
		this.css("paddingLeft",$ingleVal(a,b)+(s||$TU));
		return this;
	}

	// responsive margin-top
	$.fn.RmarginTop = function(a,b,s){
		this.css("marginTop",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive margin-right
	$.fn.RmarginRight = function(a,b,s){
		this.css("marginRight",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive margin-bottom
	$.fn.RmarginBottom = function(a,b,s){
		this.css("marginBottom",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive margin-left
	$.fn.RmarginLeft = function(a,b,s){
		this.css("marginLeft",$ingleVal(a,b)+(s||$TU));
		return this;
	}

	// responsive border-top-right-radius
	$.fn.RborderTopRightRadius = function(a,b,s){
		this.css("borderTopRightRadius",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive border-top-left-radius
	$.fn.RborderTopLeftRadius = function(a,b,s){
		this.css("borderTopLeftRadius",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive border-bottom-right-radius
	$.fn.RborderBottomRightRadius = function(a,b,s){
		this.css("borderBottomRightRadius",$ingleVal(a,b)+(s||$TU));
		return this;
	}
	// responsive border-bottom-left-radius
	$.fn.RborderBottomLeftRadius = function(a,b,s){
		this.css("borderBottomLeftRadius",$ingleVal(a,b)+(s||$TU));
		return this;
	}

	// Dual Values Counts

	// Responsive Padding Top-and Bottom
	$.fn.RpaddingTopBottom = function(a,b,s){
		// if(arguments.length==2){
			var val = $ingleVal(a,b),
					ext = s||$TU;
			this.css({
				paddingTop:val+ext,
				paddingBottom:val+ext
			});
		// }
		return this;
	}
	// Responsive Padding Top-and Bottom
	$.fn.RpaddingRightLeft = function(a,b,s){
		// if(arguments.length==2){
			var val = $ingleVal(a,b),
					ext = s||$TU;
			this.css({
				paddingRight:val+ext,
				paddingLeft:val+ext
			});
		// }
		return this;
	}

	// Responsive Margin Top-and Bottom
	$.fn.RmarginTopBottom = function(a,b,s){
		// if(arguments.length==2){
			var val = $ingleVal(a,b),
					ext = s||$TU;
			if(a==="auto"){val="auto";s=ext=""}
			if(b==="auto"){val="auto";s=ext=""}
			this.css({
				marginTop:val+ext,
				marginBottom:val+ext
			});
		// }
		return this;
	}
	// Responsive Margin Top-and Bottom
	$.fn.RmarginRightLeft = function(a,b,s){
		// if(arguments.length==2){
			var val = $ingleVal(a,b),
					ext = s||$TU;
			if(a==="auto"){val="auto";s=ext=""}
			if(b==="auto"){val="auto";s=ext=""}
			this.css({
				marginRight:val+ext,
				marginLeft:val+ext
			});
		// }
		return this;
	}


	// Multiple Values
	$.fn.Rcss = function(arg){
		if(arg.fontSize){
			var a=arg.fontSize[0],b=arg.fontSize[1],s=arg.fontSize[2];
			this.RfontSize(a,b,s);
		}
		if(arg.lineHeight){
			var a=arg.lineHeight[0],b=arg.lineHeight[1],s=arg.lineHeight[2];
			this.RlineHeight(a,b,s);
		}
		if(arg.letterSpacing){
			var a=arg.letterSpacing[0],b=arg.letterSpacing[1],s=arg.letterSpacing[2];
			this.RletterSpacing(a,b,s);
		}

		if(arg.width){
			var a=arg.width[0],b=arg.width[1],s=arg.width[2];
			this.Rwidth(a,b,s);
		}
		if(arg.heightByWidth){
			var a=arg.heightByWidth[0],b=arg.heightByWidth[1],s=arg.heightByWidth[2];
			this.RheightByWidth(a,b,s);
		}
		if(arg.widthBreakPoints){this.RwidthBreakPoints(arg.widthBreakPoints)}
		if(arg.maxWidth){
			var a=arg.maxWidth[0],b=arg.maxWidth[1],s=arg.maxWidth[2];
			this.RmaxWidth(a,b,s);
		}
			

		if(arg.padding){
			this.Rpadding(arg.padding);
		}
		if(arg.margin){
			this.Rmargin(arg.margin);
		}
		if(arg.borderRadius){
			this.RborderRadius(arg.borderRadius);
		}

		if(arg.top){
			var a=arg.top[0],b=arg.top[1],s=arg.top[2];
			this.Rtop(a,b,s);
		}
		if(arg.right){
			var a=arg.right[0],b=arg.right[1],s=arg.right[2];
			this.Rright(a,b,s);
		}
		if(arg.bottom){
			var a=arg.bottom[0],b=arg.bottom[1],s=arg.bottom[2];
			this.Rbottom(a,b,s);
		}
		if(arg.left){
			var a=arg.left[0],b=arg.left[1],s=arg.left[2];
			this.Rleft(a,b,s);
		}

		if(arg.paddingTop){
			var a=arg.paddingTop[0],b=arg.paddingTop[1],s=arg.paddingTop[2];
			this.RpaddingTop(a,b,s);
		}
		if(arg.paddingRight){
			var a=arg.paddingRight[0],b=arg.paddingRight[1],s=arg.paddingRight[2];
			this.RpaddingRight(a,b,s);
		}
		if(arg.paddingBottom){
			var a=arg.paddingBottom[0],b=arg.paddingBottom[1],s=arg.paddingBottom[2];
			this.RpaddingBottom(a,b,s);
		}
		if(arg.paddingLeft){
			var a=arg.paddingLeft[0],b=arg.paddingLeft[1],s=arg.paddingLeft[2];
			this.RpaddingLeft(a,b,s);
		}
		if(arg.paddingTopBottom){
			var a=arg.paddingTopBottom[0],b=arg.paddingTopBottom[1],s=arg.paddingTopBottom[2];
			this.RpaddingTopBottom(a,b,s);
		}
		if(arg.paddingRightLeft){
			var a=arg.paddingRightLeft[0],b=arg.paddingRightLeft[1],s=arg.paddingRightLeft[2];
			this.RpaddingRightLeft(a,b,s);
		}

		if(arg.marginTop){
			var a=arg.marginTop[0],b=arg.marginTop[1],s=arg.marginTop[2];
			this.RmarginTop(a,b,s);
		}
		if(arg.marginRight){
			var a=arg.marginRight[0],b=arg.marginRight[1],s=arg.marginRight[2];
			this.RmarginRight(a,b,s);
		}
		if(arg.marginBottom){
			var a=arg.marginBottom[0],b=arg.marginBottom[1],s=arg.marginBottom[2];
			this.RmarginBottom(a,b,s);
		}
		if(arg.marginLeft){
			var a=arg.marginLeft[0],b=arg.marginLeft[1],s=arg.marginLeft[2];
			this.RmarginLeft(a,b,s);
		}
		if(arg.marginTopBottom){
			var a=arg.marginTopBottom[0],b=arg.marginTopBottom[1],s=arg.marginTopBottom[2];
			this.RmarginTopBottom(a,b,s);
		}
		if(arg.marginRightLeft ){
			var a=arg.marginRightLeft [0],b=arg.marginRightLeft [1],s=arg.marginRightLeft [2];
			this.RmarginRightLeft (a,b,s);
		}


		return this;

	}
};
